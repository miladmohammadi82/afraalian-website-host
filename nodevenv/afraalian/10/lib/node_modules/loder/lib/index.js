'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadScript = exports.task = exports.add = exports.register = exports.loadMatch = exports.reload = exports.echo = exports.load = exports.run = exports._run = exports.get = exports.set = exports.config = exports.configure = exports.log = undefined;

var _utils = require('./utils');

var log = exports.log = {};

var _now = function _now() {
  var perf = window.performance;
  if (!perf || !perf.now) return 0;
  return perf.now();
};

var configure = exports.configure = {
  debug: true,
  warn: console.warn.bind(console),
  error: console.error.bind(console),
  trackStart: function trackStart(name) {
    var record = log[name] || (log[name] = {});
    if (!record.start) record.start = ~~_now();
  },
  trackEnd: function trackEnd(name) {
    var record = log[name] || (log[name] = {});
    if (!record.end) record.end = ~~_now();
  }

  /**
   * Keep all loders.
   *
   * loder: {
   *  pretask: [String],
   *  handler: Function,
   *  promise: Promise,
   *  value: any
   * }
   */
};var loders = {};
var lodersKey = [];

/**
 * set loder config
 */
var config = exports.config = function config(params) {
  return Object.assign(configure, params);
};

var set = exports.set = function set(key, value) {
  ;
  (loders[key] || (loders[key] = {})).value = value;
};

var get = exports.get = function get(key) {
  if ((0, _utils.isArray)(key)) return key.map(function (k) {
    return get(k);
  });
  return loders[key] && loders[key].value;
};

var addLoder = function addLoder(_ref) {
  var name = _ref.name,
      pretask = _ref.pretask,
      handler = _ref.handler;

  if (loders[name]) configure.debug && configure.warn('loder ' + name + ' already exist');
  lodersKey.push(name);
  loders[name] = {
    pretask: pretask,
    handler: handler
  };
};

var nullp = Promise.resolve(null);

var triggerLoder = function triggerLoder(_ref2) {
  var name = _ref2.name,
      params = _ref2.params,
      _ref2$reload = _ref2.reload,
      reload = _ref2$reload === undefined ? false : _ref2$reload,
      handler = _ref2.handler,
      _ref2$reusePrevParams = _ref2.reusePrevParams,
      reusePrevParams = _ref2$reusePrevParams === undefined ? false : _ref2$reusePrevParams;

  if ((0, _utils.isArray)(name)) return Promise.all(name.map(function (n) {
    return triggerLoder({
      name: n,
      reload: reload,
      reusePrevParams: reload
    });
  })).then(function (res) {
    if (handler) return handler(res);
    return res;
  });

  var loder = loders[name];

  if (!loder) {
    configure.debug && configure.error('loder ' + name + ': Not Found');
    return nullp;
  }
  configure.trackStart(name);

  var execLoder = function execLoder() {
    var pretask = loder.pretask,
        loderHandler = loder.handler;


    if (reusePrevParams) {
      params = loder.prevParams;
    }
    loder.prevParams = params;

    var pretaskPromise = nullp;
    if ((0, _utils.isArray)(pretask)) {
      pretaskPromise = triggerLoder({
        name: pretask,
        reload: reload
      });
    }

    loder.promise = pretaskPromise.then(function (res) {
      if ((0, _utils.isFunction)(loderHandler)) return loderHandler(params ? params : res);
      return res;
    }).then(function (res) {
      loder.value = res;
      configure.trackEnd(name, res);
      return res;
    });
  };

  if (reload || !loder.promise) {
    execLoder();
  }

  return loder.promise.then(function (res) {
    if ((0, _utils.isFunction)(handler)) return handler(res);
    return res;
  });
};

/**
 *
 * @param {args}
 * {
 *  name: String | Array,
 *  params: Object,
 *  handler: Function
 * }
 */

var _run = exports._run = function _run(reload) {
  return function (name, params, handler) {
    if ((0, _utils.isFunction)(params)) {
      handler = params;
      params = undefined;
    }
    return triggerLoder({
      name: name,
      params: params,
      handler: handler,
      reload: reload
    });
  };
};

var run = exports.run = _run(false);
var load = exports.load = run;
var echo = exports.echo = run;

var reload = exports.reload = _run(true);

var loadMatch = exports.loadMatch = function loadMatch(matchStr) {
  var matcher = void 0;
  if ((0, _utils.isString)(matchStr)) {
    matcher = new RegExp(matchStr);
  } else if ((0, _utils.isReg)(matchStr)) {
    matcher = matchStr;
  }
  if (matcher) {
    var matchedLoders = lodersKey.filter(function (key) {
      return matcher.exec(key);
    });
    return triggerLoder({
      name: matchedLoders
    });
  }
  return nullp;
};

/**
 * register resource or task
 * @param {args} args
 * {
 *  name: String,
 *  pretask: Array(Optional),
 *  handler: Function => Promise
 * }
 */
var register = exports.register = function register(name, pretask, handler) {
  if (!(0, _utils.isString)(name)) return configure.debug && configure.error('name is required');
  if ((0, _utils.isFunction)(pretask)) {
    handler = pretask;
    pretask = undefined;
  }

  addLoder({
    name: name,
    handler: handler,
    pretask: pretask
  });
};

var add = exports.add = register;
var task = exports.task = register;

var loadScript = exports.loadScript = function loadScript(src, attrs) {
  return new Promise(function (resolve, reject) {
    var script = document.createElement('script');
    script.type = 'text/javascript';
    script.async = true;
    script.onload = function () {
      document.body.removeChild(script);
      resolve();
    };
    script.onerror = function (err) {
      return reject(err);
    };
    attrs && Object.keys(attrs).forEach(function (key) {
      return script.setAttribute(key, attrs[key]);
    });
    script.src = src;
    document.body.appendChild(script);
  });
};

var loder = register;

Object.assign(loder, {
  log: log,
  configure: configure,
  register: register, // alias loder
  task: task, // alias loder
  add: add, // alias loder
  config: config, // config loder
  run: run,
  load: load, // alias run
  echo: echo, // alias run
  loadMatch: loadMatch,
  reload: reload,
  get: get,
  set: set,
  loadScript: loadScript
});

// export default loder
module.exports = loder;