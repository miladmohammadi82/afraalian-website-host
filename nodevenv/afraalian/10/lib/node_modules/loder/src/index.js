import {
  isString,
  isBoolean,
  isFunction,
  isArray,
  isPlainObject,
  isPromise,
  isReg,
  isUndefined,
  noop
} from './utils'

export const log = {}

const _now = () => {
  const perf = window.performance
  if (!perf || !perf.now) return 0
  return perf.now()
}

export const configure = {
  debug: true,
  warn: console.warn.bind(console),
  error: console.error.bind(console),
  trackStart: name => {
    const record = log[name] || (log[name] = {})
    if (!record.start) record.start = ~~_now()
  },
  trackEnd: name => {
    const record = log[name] || (log[name] = {})
    if (!record.end) record.end = ~~_now()
  }
}

/**
 * Keep all loders.
 *
 * loder: {
 *  pretask: [String],
 *  handler: Function,
 *  promise: Promise,
 *  value: any
 * }
 */
const loders = {}
const lodersKey = []

/**
 * set loder config
 */
export const config = params => Object.assign(configure, params)

export const set = (key, value) => {;
  (loders[key] || (loders[key] = {})).value = value
}

export const get = key => {
  if (isArray(key)) return key.map(k => get(k))
  return loders[key] && loders[key].value
}

const addLoder = ({
  name,
  pretask,
  handler
}) => {
  if (loders[name])
    configure.debug && configure.warn(`loder ${name} already exist`)
  lodersKey.push(name)
  loders[name] = {
    pretask,
    handler
  }
}

const nullp = Promise.resolve(null)

const triggerLoder = ({
  name,
  params,
  reload = false,
  handler,
  reusePrevParams = false
}) => {
  if (isArray(name))
    return Promise.all(
      name.map(n => triggerLoder({
        name: n,
        reload,
        reusePrevParams: reload
      }))
    ).then(res => {
      if (handler) return handler(res)
      return res
    })

  const loder = loders[name]

  if (!loder) {
    configure.debug && configure.error(`loder ${name}: Not Found`)
    return nullp
  }
  configure.trackStart(name)

  const execLoder = () => {
    const {
      pretask,
      handler: loderHandler
    } = loder

    if (reusePrevParams) {
      params = loder.prevParams
    }
    loder.prevParams = params

    let pretaskPromise = nullp
    if (isArray(pretask)) {
      pretaskPromise = triggerLoder({
        name: pretask,
        reload
      })
    }

    loder.promise = pretaskPromise
      .then(res => {
        if (isFunction(loderHandler)) return loderHandler(params ? params : res)
        return res
      })
      .then(res => {
        loder.value = res
        configure.trackEnd(name, res)
        return res
      })
  }

  if (reload || !loder.promise) {
    execLoder()
  }

  return loder.promise.then(res => {
    if (isFunction(handler)) return handler(res)
    return res
  })
}

/**
 *
 * @param {args}
 * {
 *  name: String | Array,
 *  params: Object,
 *  handler: Function
 * }
 */

export const _run = reload => (name, params, handler) => {
  if (isFunction(params)) {
    handler = params
    params = undefined
  }
  return triggerLoder({
    name,
    params,
    handler,
    reload
  })
}

export const run = _run(false)
export const load = run
export const echo = run

export const reload = _run(true)

export const loadMatch = matchStr => {
  let matcher
  if (isString(matchStr)) {
    matcher = new RegExp(matchStr)
  } else if (isReg(matchStr)) {
    matcher = matchStr
  }
  if (matcher) {
    const matchedLoders = lodersKey.filter(key => {
      return matcher.exec(key)
    })
    return triggerLoder({
      name: matchedLoders
    })
  }
  return nullp
}

/**
 * register resource or task
 * @param {args} args
 * {
 *  name: String,
 *  pretask: Array(Optional),
 *  handler: Function => Promise
 * }
 */
export const register = (name, pretask, handler) => {
  if (!isString(name))
    return configure.debug && configure.error(`name is required`)
  if (isFunction(pretask)) {
    handler = pretask
    pretask = undefined
  }

  addLoder({
    name,
    handler,
    pretask
  })
}

export const add = register
export const task = register

export const loadScript = (src, attrs) =>
  new Promise((resolve, reject) => {
    const script = document.createElement('script')
    script.type = 'text/javascript'
    script.async = true
    script.onload = () => {
      document.body.removeChild(script)
      resolve()
    }
    script.onerror = err => reject(err)
    attrs &&
      Object.keys(attrs).forEach(key => script.setAttribute(key, attrs[key]))
    script.src = src
    document.body.appendChild(script)
  })

const loder = register

Object.assign(loder, {
  log,
  configure,
  register, // alias loder
  task, // alias loder
  add, // alias loder
  config, // config loder
  run,
  load, // alias run
  echo, // alias run
  loadMatch,
  reload,
  get,
  set,
  loadScript
})

// export default loder
module.exports = loder