require('babel-polyfill')
const rollup = require('rollup')
const commonjs = require('rollup-plugin-commonjs')
const nodeResolve = require('rollup-plugin-node-resolve')
const buble = require('buble')
const uglify = require('uglify-js')
const fs = require('fs-extra')
const gzipSize = require('gzip-size')
const _ = require('lodash')

// see below for details on the options
const inputOptions = {
  input: 'src/index.js',
  plugins: [
    nodeResolve({
      jsnext: true,
      main: true
    }),
    commonjs({
      include: 'node_modules/**', // Default: undefined
      sourceMap: false, // Default: true
      namedExports: { './module.js': ['foo', 'bar'] } // Default: undefined
    })
  ]
}

const outputOptions = {
  umd: {
    file: 'dist/loder.umd.js',
    format: 'umd',
    name: 'loder',
    sourcemap: true
  },
  cjs: {
    file: 'dist/loder.cmd.js',
    format: 'cjs',
    sourcemap: true
  }
}

const makeBuild = async format => {
  const bundle = await rollup.rollup(inputOptions)
  let { code, map } = await bundle.generate(outputOptions[format])
  code = buble.transform(code).code
  code = uglify.minify(code, {
    output: {
      ascii_only: true
    }
  }).code
  fs.writeFileSync(`dist/loder.${format}.js`, code)
  const originSize = Number(code.length / 1024).toFixed(2)
  const size = Number(gzipSize.sync(code) / 1024).toFixed(2)
  console.log(
    `Done ${_.upperCase(
      format
    )} build, with origin size ${originSize}kb, gziped ${size}kb`
  )
}

async function build() {
  fs.mkdirpSync('dist')
  await makeBuild('umd')
  await makeBuild('cjs')
}
export default build
